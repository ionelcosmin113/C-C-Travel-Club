package proiect.fis.CC.services;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Reader;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Objects;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import proiect.fis.CC.model.User;

public class ClientService extends UserService {
    private static ArrayList<User> clients = new ArrayList();
    public static JSONArray requests = new JSONArray();

    public ClientService() {
    }

    public static void read() {
        JSONParser parser1 = new JSONParser();

        try {
            Reader reader = new FileReader("src/main/java/data/data.json");
            Throwable var2 = null;

            try {
                JSONArray jsonArray = (JSONArray)parser1.parse(reader);
                Iterator it = jsonArray.iterator();

                while(it.hasNext()) {
                    JSONObject obj = (JSONObject)it.next();
                    User user = new User(obj.get("username").toString(), obj.get("password").toString(), obj.get("email").toString(), obj.get("address").toString(), obj.get("hotelName").toString(), obj.get("role").toString());
                    clients.add(user);
                }
            } catch (Throwable var16) {
                var2 = var16;
                throw var16;
            } finally {
                if (reader != null) {
                    if (var2 != null) {
                        try {
                            reader.close();
                        } catch (Throwable var15) {
                            var2.addSuppressed(var15);
                        }
                    } else {
                        reader.close();
                    }
                }

            }
        } catch (IOException var18) {
            var18.printStackTrace();
        } catch (ParseException var19) {
            var19.printStackTrace();
        }

    }

    public static JSONArray displayHotels(String city) {
        read();
        JSONArray hotels = new JSONArray();
        Iterator var2 = clients.iterator();

        while(var2.hasNext()) {
            User userIterator = (User)var2.next();
            if (Objects.equals(city, userIterator.getAddress()) && Objects.equals("manager", userIterator.getRole())) {
                hotels.add(userIterator.getHotelName());
            }
        }

        clients.clear();
        return hotels;
    }

    public static void loadUsersFromFile() {
        JSONParser parser = new JSONParser();

        try {
            FileReader readFile = new FileReader("src/main/java/data/request.json");
            BufferedReader read = new BufferedReader(readFile);
            Object p = parser.parse(read);
            if (p instanceof JSONArray) {
                requests = (JSONArray)p;
            }
        } catch (IOException | ParseException var4) {
            var4.printStackTrace();
        }

    }

    public static boolean writeRequest(String request, String checkin, String checkout, String username, String hotel) {
        loadUsersFromFile();
        JSONObject userRequest = new JSONObject();
        userRequest.put("request", request);
        userRequest.put("checkin", checkin);
        userRequest.put("checkout", checkout);
        userRequest.put("status", "Pending");
        userRequest.put("username", username);
        userRequest.put("hotel", hotel);
        requests.add(userRequest);

        try {
            FileWriter file = new FileWriter("src/main/java/data/request.json");
            Throwable var7 = null;

            try {
                file.write(requests.toString());
                file.flush();
            } catch (Throwable var17) {
                var7 = var17;
                throw var17;
            } finally {
                if (file != null) {
                    if (var7 != null) {
                        try {
                            file.close();
                        } catch (Throwable var16) {
                            var7.addSuppressed(var16);
                        }
                    } else {
                        file.close();
                    }
                }

            }

            return true;
        } catch (IOException var19) {
            var19.printStackTrace();
            return false;
        }
    }
}
