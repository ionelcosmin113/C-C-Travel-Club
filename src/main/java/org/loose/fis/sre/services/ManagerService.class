package proiect.fis.CC.services;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import proiect.fis.CC.model.Rooms;

public class ManagerService {
    private static JSONArray roomsList = new JSONArray();
    private static ArrayList<Rooms> rooms = new ArrayList();
    static List<Rooms> room;

    public ManagerService() {
    }

    public static void loadRoomsFromFile() {
        JSONParser parser = new JSONParser();

        try {
            FileReader readFile = new FileReader("src/main/java/data/rooms.json");
            BufferedReader read = new BufferedReader(readFile);
            Object p = parser.parse(read);
            if (p instanceof JSONArray) {
                roomsList = (JSONArray)p;
                room = (JSONArray)p;
            }
        } catch (IOException | ParseException var4) {
            var4.printStackTrace();
        }

    }

    public static void addRooms(String number, String price, String description, String newcategory, String newdescription, String username) {
        loadRoomsFromFile();
        JSONObject rooms = new JSONObject();
        rooms.put("Number", number);
        rooms.put("Price", price);
        rooms.put("Description", description);
        rooms.put("Category", newcategory);
        rooms.put("CategDes", newdescription);
        rooms.put("UserName", username);
        roomsList.add(rooms);

        try {
            FileWriter file = new FileWriter("src/main/java/data/rooms.json");
            Throwable var8 = null;

            try {
                file.write(roomsList.toString());
                file.flush();
            } catch (Throwable var18) {
                var8 = var18;
                throw var18;
            } finally {
                if (file != null) {
                    if (var8 != null) {
                        try {
                            file.close();
                        } catch (Throwable var17) {
                            var8.addSuppressed(var17);
                        }
                    } else {
                        file.close();
                    }
                }

            }
        } catch (IOException var20) {
            var20.printStackTrace();
        }

    }
}
